def matrix_divided(matrix, div):
    """
    Divide all elements of a matrix by a given divisor.

    Args:
        matrix (list of lists): The matrix to be divided.
        div (int or float): The divisor.

    Returns:
        list of lists: A new matrix with elements rounded to two decimal places.

    Raises:
        TypeError:
            - If the matrix is not a list of lists consisting of ints or floats.
            - If the divisor is not an int or float.
            - If any element in the matrix is neither an int nor a float.
        ZeroDivisionError: If the divisor is zero.
        ValueError: If rows in the matrix have different sizes.

    Note:
        - All elements in the resulting matrix are rounded to a maximum of two decimal places.
    """
    if not isinstance(matrix, list) or not all(isinstance(row, list) for row in matrix):
        raise TypeError("matrix must be a matrix (list of lists) of integers/floats")

    if not (isinstance(div, int) or isinstance(div, float)):
        raise TypeError("div must be a number")

    if div == 0:
        raise ZeroDivisionError("division by zero")

    # Check if all rows have the same length
    row_length = len(matrix[0])
    if not all(len(row) == row_length for row in matrix):
        raise ValueError("Each row of the matrix must have the same size")

    # Divide and round all elements
    return [[round(element / div, 2) for element in row] for row in matrix]

